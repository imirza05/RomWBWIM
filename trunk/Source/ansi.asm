;
;==================================================================================================
;   ANSI EMULATION MODULE
;==================================================================================================
;
ANSI_INIT:
	JR	ANSI_INI
;
;
;
ANSI_DISPATCH:
	LD	A,B		; GET REQUESTED FUNCTION
	AND	$0F		; ISOLATE SUB-FUNCTION
	JR	Z,ANSI_IN	; $30
	DEC	A
	JR	Z,ANSI_OUT	; $31
	DEC	A
	JR	Z,ANSI_IST	; $32
	DEC	A
	JR	Z,ANSI_OST	; $33
	DEC	A
	JR	Z,ANSI_CFG	; $34
	CP	8
	JR	Z,ANSI_INI	; $38
	CP	9
	JR	Z,ANSI_QRY	; $39
	CALL	PANIC
;
;
;
ANSI_IN:
	LD	B,BF_VDAKRD
	JP	EMU_VDADISP
;
;
;
ANSI_OUT:
	CALL	ANSI_DOCHAR
	XOR	A
	RET
;
;
;
ANSI_IST:
	LD	B,BF_VDAKST
	JP	EMU_VDADISP
;
;
;
ANSI_OST:
	XOR	A
	INC	A
	RET
;
;
;
ANSI_CFG:
	XOR	A
	RET
;
;
;
ANSI_INI:
	LD	(ANSI_ROW),A
	LD	(ANSI_COL),A
	LD	B,BF_VDARES
	JP	EMU_VDADISP	; RESET VDA
;
;
;
ANSI_QRY:
	XOR	A
	RET
;
;
;
ANSI_DOCHAR:
	LD	A,E		; CHARACTER TO PROCESS
	CP	8		; BACKSPACE
	JR	Z,ANSI_BS
	CP	12		; FORMFEED
	JR	Z,ANSI_FF
	CP	13		; CARRIAGE RETURN
	JR	Z,ANSI_CR
	CP	10		; LINEFEED
	JR	Z,ANSI_LF
	CP	32		; COMPARE TO SPACE (FIRST PRINTABLE CHARACTER)
	RET	C		; SWALLOW OTHER CONTROL CHARACTERS
	LD	B,BF_VDAWRC
	CALL	EMU_VDADISP	; SPIT OUT THE RAW CHARACTER
	LD	A,(ANSI_COL)	; GET CUR COL
	INC	A		; INCREMENT
	LD	(ANSI_COL),A	; SAVE IT
	CP	80		; COMPARE TO COLS IN LINE
	RET	C		; NOT PAST END OF LINE, ALL DONE
	CALL	ANSI_CR		; CARRIAGE RETURN
	JR	ANSI_LF		; LINEFEED AND RETURN
;
ANSI_FF:
	LD	DE,0		; HOME CURSOR
	LD	(ANSI_ROWCOL),DE	; SAVE IT
	CALL	ANSI_XY		; EXECUTE
	LD	E,' '		; FILL SCREEN WITH BLANKS
	LD	HL,80 * 24	; NUMBER OF CHARACTER POSITIONS TO FILL
	LD	B,BF_VDAFIL
	CALL	EMU_VDADISP	; PERFORM FILL
	JR	ANSI_XY		; HOME CURSOR AND RETURN
;
ANSI_BS:
	LD	DE,(ANSI_ROWCOL)	; GET CURRENT ROW/COL IN DE
	LD	A,E		; GET CURRENT COLUMN
	CP	1		; COMPARE TO COLUMN 1
	RET	C		; LESS THAN 1, NOTHING TO DO
	DEC	E		; POINT TO PREVIOUS COLUMN
	LD	(ANSI_ROWCOL),DE	; SAVE NEW COLUMN VALUE
	CALL	ANSI_XY		; MOVE CURSOR TO NEW TARGET COLUMN
	LD	E,' '		; LOAD A SPACE CHARACTER
	LD	B,BF_VDAWRC
	CALL	EMU_VDADISP	; OVERWRITE WITH A SPACE CHARACTER
	JR	ANSI_XY		; NEED TO MOVE CURSOR BACK TO NEW TARGET COLUMN
;
ANSI_CR:
	XOR	A
	LD	(ANSI_COL),A
	JR	ANSI_XY
;
ANSI_LF:
	LD	A,(ANSI_ROW)
	INC	A
	LD	(ANSI_ROW),A
	CP	24		; COMPARE TO SCREEN ROWS
	JR	C,ANSI_XY	; NOT PAST END, ALL DONE
	SUB	23		; A WILL NOW HAVE NUM LINES TO SCROLL
	LD	E,A		; LINES TO SCROLL -> E
	LD	B,BF_VDASCR
	CALL	EMU_VDADISP	; DO THE SCROLLING
	LD	A,23		; ROW 23
	LD	(ANSI_ROW),A	; IS NOW CORRECT
	JR	ANSI_XY		; RESPOSITION CURSOR AND RETURN
;
ANSI_XY:
	LD	DE,(ANSI_ROWCOL)
	LD	B,BF_VDASCP
	JP	EMU_VDADISP
;
;
;
ANSI_ROWCOL:
ANSI_COL		.DB	0
ANSI_ROW		.DB	0
