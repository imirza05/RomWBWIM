                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.2 #6489 (May 10 2011) (Mac OS X x86_64)
                              4 ; This file was generated Sat May 21 07:40:18 2011
                              5 ;--------------------------------------------------------
                              6 	.module loaderhc
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _loaderhc
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 ;--------------------------------------------------------
                             17 ;  ram data
                             18 ;--------------------------------------------------------
                             19 	.area _DATA
                             20 ;--------------------------------------------------------
                             21 ; overlayable items in  ram 
                             22 ;--------------------------------------------------------
                             23 	.area _OVERLAY
                             24 ;--------------------------------------------------------
                             25 ; external initialized ram data
                             26 ;--------------------------------------------------------
                             27 ;--------------------------------------------------------
                             28 ; global & static initialisations
                             29 ;--------------------------------------------------------
                             30 	.area _HOME
                             31 	.area _GSINIT
                             32 	.area _GSFINAL
                             33 	.area _GSINIT
                             34 ;--------------------------------------------------------
                             35 ; Home
                             36 ;--------------------------------------------------------
                             37 	.area _HOME
                             38 	.area _HOME
                             39 ;--------------------------------------------------------
                             40 ; code
                             41 ;--------------------------------------------------------
                             42 	.area _CODE
                             43 ;loaderhc.c:1: void loaderhc(void)
                             44 ;	---------------------------------
                             45 ; Function loaderhc
                             46 ; ---------------------------------
   0000                      47 _loaderhc_start::
   0000                      48 _loaderhc:
                             49 
                             50 
                             51 ;***********************************
                             52 ;*	Z180 Home Computer Prototype
                             53 ;*	LOAD MONITOR FROM ROM INTO RAM AND EXECUTE Program
                             54 ;*	Andrew Lynch
                             55 ;*	lynchaj@yahoo.com
                             56 ;*	15 Feb 2007
                             57 ;* 	Updated by Max Scane 26 May 2010 for increase in BIOS size
                             58 ;*	Updated by Max Scane April 2011 for the home computer
                             59 ;***********************************
                             60 
                             61 	.area	_HEADER (ABS)
                             62 
                             63 ;********************* CONSTANTS ****************************************
                             64 
                    FFFF     65 RAMTOP 		= 	0xffff		; highest addressable memory location
                    F800     66 MONSTART	= 	0xf800		; start of 2k for rom monitor f800-ffff
                    8000     67 RAMBOTTOM	=	0x8000		; beginning of upper 32k of ram
                    00FF     68 END		=	0xff		; mark ed of text
                    000D     69 CR		=	0x0d
                    000A     70 LF		=	0x0a
                    001B     71 ESC		=	0x1b
                             72 
                             73 
                    0100     74 ROMSTART_MON	=	0x0100	; Where the Monitor is stored in ROM
                    F800     75 RAMTARG_MON	=	0xF800	; Where the Monitor starts in RAM (entry point)
                    0800     76 MOVSIZ_MON	=	0x0800	; Monitor is 2KB in length
                             77 
                    0900     78 ROMSTART_CPM	=	0x0900	; Where the CCP+BDOS+BIOS is stored in ROM
                    D400     79 RAMTARG_CPM	=	0xD400	; Where the CCP+BDOS+BIOS starts in RAM 
                    1F00     80 MOVSIZ_CPM	=	0x1F00	; CCP, BDOS, + BIOS is 7-8KB in length
                             81 
                    F860     82 Monitor_Entry	=	0xF860	; Monitor Entry Point (May change)
                             83 
                             84 
                    0080     85 HC_REG_BASE     =	0x80             ; HOME COMPUTER I/O REGS $80-$9F
                    0080     86 PPI1		=	HC_REG_BASE+0x00
                    0094     87 ACR		=	HC_REG_BASE+0x14
                    0096     88 RMAP            =	ACR+2
                             89 
                    0040     90 IO_REG_BASE	=	0x40		; IO register base offset for Z1x80
                    0040     91 CNTLA0		=	IO_REG_BASE+0x00
                    0042     92 CNTLB0		= 	IO_REG_BASE+0x02
                    0044     93 STAT0		=	IO_REG_BASE+0x04
                    0046     94 TDR0		=	IO_REG_BASE+0x6
                    0048     95 RDR0		=	IO_REG_BASE+0x08
                    0078     96 CBR		=	IO_REG_BASE+0x38
                    0079     97 BBR		=	IO_REG_BASE+0x39
                    007A     98 CBAR		=	IO_REG_BASE+0x3a
                    003F     99 ICR             =       0x3f             ; not relocated!!!
                            100 
                            101 
                            102 ;*******************************************************************
                            103 ;*	START AFTER RESET
                            104 ;*	Function	: ready system, load monitor into RAM and start
                            105 ;*******************************************************************
                            106 
   0000                     107 	.ORG	0x0000
   0000 C3r03s00            108 	jp		ENTRY
                            109 
                            110 	; place here data for the loader to use for booting (later)
                            111 	;
                            112 	; Note before you move the monitor into top of RAM you need to setup
                            113 	; the MMU.  Currently it is setup compatible with the N8VEM V1 as
                            114 	; 32KB common and 32KB banked
                            115 	; This may change in the future
                            116 	;
   0003                     117 ENTRY:
   0003 F3                  118 	DI							; Disable interrupts
   0004 3E 40               119         ld      a,#IO_REG_BASE                   ; get the Relocation value
                            120 
                            121 ;	out0	(ICR),a
   0006 ED 39 3F            122 	.db	0x0ed,0x39,ICR
                            123 
   0009 3E 80               124 	ld	a,#0x80				; setup for a 33/32 KB memory plan
                            125 ;	out0	(CBAR),a
   000B ED 39 7A            126 	.db	0x0ed,0x39,CBAR
                            127 
   000E 3E 00               128 	ld	a,#0x00
                            129 
                            130 ;	out0	(BBR),a				; banked area starts at 0
   0010 ED 39 79            131 	.db	0x0ed,0x39,BBR
                            132 
   0013 3E 00               133 	ld	a,#0x00
                            134 ;	out0	(CBR),a				; so does common area
   0015 ED 39 78            135 	.db	0x0ed,0x39,CBR
                            136 	
   0018 31 FF FF            137 	LD	SP,#RAMTOP			; Set stack pointer to top of ram
   001B ED 56               138 	IM	1					; Set interrupt mode 1
                            139 
   001D 21 00 01            140 	LD	HL,#ROMSTART_MON		; where in rom Monitor is stored 
   0020 11 00 F8            141 	LD	DE,#RAMTARG_MON		; where in ram to move Monitor to 
   0023 01 00 08            142 	LD	BC,#MOVSIZ_MON		; number of bytes to move from ROM to RAM
   0026 ED B0               143 	LDIR				; Block Copy Monitor to Upper RAM page
                            144 
   0028 21 00 09            145 	LD	HL,#ROMSTART_CPM		; where in rom CP/M is stored (first byte)
   002B 11 00 D4            146 	LD	DE,#RAMTARG_CPM		; where in ram to move CP/M to (first byte)
   002E 01 00 1F            147 	LD	BC,#MOVSIZ_CPM		; number of bytes to move from ROM to RAM
   0031 ED B0               148 	LDIR				; Block Copy of CP/M to Upper RAM page
                            149 
                            150 ;	EI		; enable interrupts (access to Monitor while CP/M running)
                            151 
   0033 C3 00 F8            152 	JP	MONSTART			; jump to Start of Monitor
                            153 
                            154 
                            155 ;************************************************************************
                            156 ;*	MASKABLE INTERRUPT-PROGRAM
                            157 ;*	Function	:
                            158 ;*	Input		:
                            159 ;*	Output		: 
                            160 ;*	uses		: 
                            161 ;*	calls		: none
                            162 ;*	info		:
                            163 ;*	tested		: 2 Feb 2007
                            164 ;************************************************************************
                            165 
   0038                     166 	.ORG	0x0038				; Int mode 1
   0038 ED 4D               167 	RETI						; return from interrupt
                            168 
                            169 
                            170 ;************************************************************************
                            171 ;*	NONMASKABLE INTERRUPT-PROGRAM
                            172 ;*	Function	:
                            173 ;*	Input		:
                            174 ;*	Output		: none
                            175 ;*	uses		: 
                            176 ;*	calls		: none
                            177 ;*	info		:
                            178 ;*	tested		: 2 Feb 2007
                            179 ;************************************************************************
                            180 
   0066                     181 	.ORG	0x0066		; HERE IS THE NMI ROUTINE
                            182 ;;;	RETI
   0066 ED 45               183 	RETN                    ; return from NMI
                            184 
   00FF                     185 	.ORG	0x00FF
   00FF FF                  186 FLAG:	.db	0x0FF
                            187 
                            188 
   0100                     189 _loaderhc_end::
                            190 	.area _CODE
                            191 	.area _CABS
